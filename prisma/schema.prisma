// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

datasource db {
  provider        = "mongodb"
  url             = env("MONGO_URL")
}

model User {
   id             String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
   email          String
   googleId       String   @unique
   givenName      String
   familyName     String
   task           Task[]
   wellness       Wellness[]
   exercise       Exercise[]
   productivity   Productivity[]
   note           Note[]
   weeklyTask     Weeklytask[]
   wins           Wins[]
   improvements   Improvements[]
   learning       Learning[]
   refocus        Refocus[]
}

model Date {
   id             String      @id @default(dbgenerated()) @map("_id") @db.ObjectId
   date           DateTime    @db.Date @unique
   wellness       Wellness[]
   exercise       Exercise[]
   tasks          Task[]
   notes          Note[]
   productivity   Productivity[]
}

model Week {
   id             String      @id @default(dbgenerated()) @map("_id") @db.ObjectId
   week           Int
   year           Int
   weeklyTask     Weeklytask[]
   wins           Wins[]
   improvements   Improvements[]
   learning       Learning[]
   refocus        Refocus[]
}

model Task {
   id          String      @id @default(dbgenerated()) @map("_id") @db.ObjectId
   name        String
   userId      String      @db.ObjectId
   user        User        @relation(fields: [userId], references:[id])
   dateId      String      @db.ObjectId
   date        Date        @relation(fields: [dateId], references:[id])
   goalTime    String
   timeTracker Int
   statusId    String
   completed   Boolean     @default(false)
}

model Exercise {
   id          String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
   userId      String   @db.ObjectId
   user        User     @relation(fields: [userId], references:[id])
   completed   Boolean  @default(false)
   dateId      String   @db.ObjectId
   date        Date     @relation(fields: [dateId], references:[id])
}

model Wellness {
   id          String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
   userId      String   @db.ObjectId
   user        User     @relation(fields: [userId], references:[id])
   rating      Int
   dateId      String   @db.ObjectId
   date        Date     @relation(fields: [dateId], references:[id])
}

model Productivity {
   id          String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
   userId      String   @db.ObjectId
   user        User     @relation(fields: [userId], references:[id])
   score       Int
   dateId      String   @db.ObjectId
   date        Date     @relation(fields: [dateId], references:[id])
}

model Note {
   id          String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
   userId      String   @db.ObjectId
   user        User     @relation(fields:[userId], references:[id])
   note        String
   dateId      String   @db.ObjectId
   date        Date     @relation(fields: [dateId], references:[id])
}

model Weeklytask {
   id          String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
   userId      String   @db.ObjectId
   user        User     @relation(fields:[userId], references:[id])
   task        String
   statusId    String
   completed   Boolean
   weekId      String   @db.ObjectId
   week        Week     @relation(fields: [weekId], references: [id])
}

model Wins {
   id          String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
   userId      String   @db.ObjectId
   user        User     @relation(fields:[userId], references:[id])
   item        String
   weekId      String   @db.ObjectId
   week        Week     @relation(fields: [weekId], references: [id])
}

model Improvements {
   id          String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
   userId      String   @db.ObjectId
   user        User     @relation(fields:[userId], references:[id])
   item        String
   weekId      String   @db.ObjectId
   week        Week     @relation(fields: [weekId], references: [id])
}

model Learning {
   id          String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
   userId      String   @db.ObjectId
   user        User     @relation(fields:[userId], references:[id])
   item        String
   weekId      String   @db.ObjectId
   week        Week     @relation(fields: [weekId], references: [id])
}

model Refocus {
   id          String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
   userId      String   @db.ObjectId
   user        User     @relation(fields:[userId], references:[id])
   item        String
   weekId      String   @db.ObjectId
   week        Week     @relation(fields: [weekId], references: [id])
}